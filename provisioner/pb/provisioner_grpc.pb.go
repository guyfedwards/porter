// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProvisionerClient is the client API for Provisioner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvisionerClient interface {
	// Server-to-client streaming RPC that returns an update to the state.
	GetState(ctx context.Context, in *Infra, opts ...grpc.CallOption) (Provisioner_GetStateClient, error)
}

type provisionerClient struct {
	cc grpc.ClientConnInterface
}

func NewProvisionerClient(cc grpc.ClientConnInterface) ProvisionerClient {
	return &provisionerClient{cc}
}

func (c *provisionerClient) GetState(ctx context.Context, in *Infra, opts ...grpc.CallOption) (Provisioner_GetStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Provisioner_ServiceDesc.Streams[0], "/Provisioner/GetState", opts...)
	if err != nil {
		return nil, err
	}
	x := &provisionerGetStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Provisioner_GetStateClient interface {
	Recv() (*StateUpdate, error)
	grpc.ClientStream
}

type provisionerGetStateClient struct {
	grpc.ClientStream
}

func (x *provisionerGetStateClient) Recv() (*StateUpdate, error) {
	m := new(StateUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProvisionerServer is the server API for Provisioner service.
// All implementations must embed UnimplementedProvisionerServer
// for forward compatibility
type ProvisionerServer interface {
	// Server-to-client streaming RPC that returns an update to the state.
	GetState(*Infra, Provisioner_GetStateServer) error
	mustEmbedUnimplementedProvisionerServer()
}

// UnimplementedProvisionerServer must be embedded to have forward compatible implementations.
type UnimplementedProvisionerServer struct {
}

func (UnimplementedProvisionerServer) GetState(*Infra, Provisioner_GetStateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedProvisionerServer) mustEmbedUnimplementedProvisionerServer() {}

// UnsafeProvisionerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvisionerServer will
// result in compilation errors.
type UnsafeProvisionerServer interface {
	mustEmbedUnimplementedProvisionerServer()
}

func RegisterProvisionerServer(s grpc.ServiceRegistrar, srv ProvisionerServer) {
	s.RegisterService(&Provisioner_ServiceDesc, srv)
}

func _Provisioner_GetState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Infra)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProvisionerServer).GetState(m, &provisionerGetStateServer{stream})
}

type Provisioner_GetStateServer interface {
	Send(*StateUpdate) error
	grpc.ServerStream
}

type provisionerGetStateServer struct {
	grpc.ServerStream
}

func (x *provisionerGetStateServer) Send(m *StateUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// Provisioner_ServiceDesc is the grpc.ServiceDesc for Provisioner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provisioner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Provisioner",
	HandlerType: (*ProvisionerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetState",
			Handler:       _Provisioner_GetState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "provisioner/provisioner.proto",
}
